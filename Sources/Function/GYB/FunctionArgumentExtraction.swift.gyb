%{
    #
    #  FunctionArgumentExtraction.swift.gyb
    #  SwiftSpellBook
    #
    #  Created by Braden Scothern on 9/21/22.
    #  Copyright © 2020-2023 Braden Scothern. All rights reserved.
    #

    from datetime import date
    date_string = date.today().strftime("%m/%d/%y")
    type_overload_min = 1
    type_overload_count = 10
 
    t_value = "T1"
    t_values = [t_value]
    
    for i in range(type_overload_min + 1, type_overload_count + 1):
        t_value += f", T{i}"
        t_values.append(t_value)

    def doc_number_desc(value):
        if value == 1:
            return "1st"
        elif value == 2:
            return "2nd"
        elif value == 3:
            return "3rd"
        else:
            return str(value) + "th"
}%
//
//  FunctionArgumentExtraction.swift
//  SwiftSpellBook
//
//  Generated by gyb on ${date_string}.
//  Copyright © 2020-2023 Braden Scothern. All rights reserved.
//
% for i in range(type_overload_min, type_overload_count + 1):
% for j in range(type_overload_min, i + 1):

/// Extracts the ${doc_number_desc(j)} argument type from the function.
///
/// - Parameter function: The function which should have an argument type extracted.
/// - Returns: The ${doc_number_desc(j)} argument type.
@_transparent
public func extractArgument${j}Type<${t_values[i - type_overload_min]}, Value>(_ function: (${t_values[i - type_overload_min]}) -> Value) -> T${j}.Type {
    T${j}.self
}
% end
% end
