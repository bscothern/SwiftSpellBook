%{
    #
    #  FunctionArgumentExtraction.swift.gyb
    #  SwiftSpellBook
    #
    #  Created by Braden Scothern on 7/18/20.
    #  Copyright © 2020-2022 Braden Scothern. All rights reserved.
    #

    from datetime import date
    date_string = date.today().strftime("%m/%d/%y")
    overload_min = 2
    overload_count = 10
    
    t_value = "T0"
    forward_t_value = "t.0"
    t_values = []
    forward_t_values = []

    for i in range(overload_min - 1, overload_count):
        t_value += f", T{i}"
        t_values.append(t_value)
        forward_t_value += f", t.{i}"
        forward_t_values.append(forward_t_value)
}%
//
//  FunctionArgumentsAsTuple.swift
//  SwiftSpellBook
//
//  Generated by gyb on ${date_string}.
//  Copyright © 2020-2022 Braden Scothern. All rights reserved.
//

@_transparent
public func tupleArguments<T0, Value>(_ function: @escaping (T0) -> Value) -> ((T0)) -> Value {
    { t in
        function(t)
    }
}

@_transparent
public func tupleArguments<T0, Value>(_ function: @escaping @Sendable (T0) -> Value) -> @Sendable ((T0)) -> Value {
    { t in
        function(t)
    }
}

@_transparent
public func tupleArguments<T0, Value>(_ function: @escaping (T0) throws -> Value) -> ((T0)) throws -> Value {
    { t in
        try function(t)
    }
}

@_transparent
public func tupleArguments<T0, Value>(_ function: @escaping @Sendable (T0) throws -> Value) -> @Sendable ((T0)) throws -> Value {
    { t in
        try function(t)
    }
}
% for i in range(overload_min, overload_count + 1):

@_transparent
public func tupleArguments<${t_values[i - overload_min]}, Value>(_ function: @escaping (${t_values[i - overload_min]}) -> Value) -> ((${t_values[i - overload_min]})) -> Value {
    { t in
        function(${forward_t_values[i - overload_min]})
    }
}

@_transparent
public func tupleArguments<${t_values[i - overload_min]}, Value>(_ function: @escaping @Sendable (${t_values[i - overload_min]}) -> Value) -> @Sendable ((${t_values[i - overload_min]})) -> Value {
    { t in
        function(${forward_t_values[i - overload_min]})
    }
}

@_transparent
public func tupleArguments<${t_values[i - overload_min]}, Value>(_ function: @escaping (${t_values[i - overload_min]}) throws -> Value) -> ((${t_values[i - overload_min]})) throws -> Value {
    { t in
        try function(${forward_t_values[i - overload_min]})
    }
}

@_transparent
public func tupleArguments<${t_values[i - overload_min]}, Value>(_ function: @escaping @Sendable (${t_values[i - overload_min]}) throws -> Value) -> @Sendable ((${t_values[i - overload_min]})) throws -> Value {
    { t in
        try function(${forward_t_values[i - overload_min]})
    }
}
% end
