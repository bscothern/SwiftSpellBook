%{
    #
    #  FunctionArgumentsBind.swift.gyb
    #  SwiftSpellBook
    #
    #  Created by Braden Scothern on 7/18/20.
    #  Copyright © 2020-2022 Braden Scothern. All rights reserved.
    #

    from datetime import date
    date_string = date.today().strftime("%m/%d/%y")
    type_overload_min = 2
    type_overload_count = 10

    t_value = "T1"
    t_values = [t_value]
    t_value_forwards = ["arg1"]
    t_value_combos = {}
    t_value_input_combos = {}


    for i in range(type_overload_min, type_overload_count + 1):
        t_value += f", T{i}"
        t_values.append(t_value)

    # go over each t_value and create the combos minus 1 element
    for i in range(type_overload_min, type_overload_count + 1):
        t_value = t_values[i - type_overload_min]
        t_value_forward = t_value_forwards[i - type_overload_min]
        t_value_forward += f", arg{i}"
        t_value_forwards.append(t_value_forward)
        t_value_combos[t_value] = []
        t_value_input_combos[t_value] = []
        for j in range(1, i):
            tType = ""
            input_combo = ""
            for k in range(1, i):
                if j == k:
                    continue
                elif tType == "":
                    tType = f"T{k}"
                    input_combo = f"arg{k}"
                else:
                    tType += f", T{k}"
                    input_combo += f", arg{k}"
            t_value_combos[t_value].append(tType)
            t_value_input_combos[t_value].append(input_combo)
}%
//
//  FunctionArgumentsBind.swift
//  SwiftSpellBook
//
//  Generated by gyb on ${date_string}.
//  Copyright © 2020-2022 Braden Scothern. All rights reserved.
//

/// Binds an argument into the function such that it takes one less argument.
///
/// - Returns: A function that takes one less argument than `function`.
///     The value is bound into the specified argument position.
@_transparent
public func bind<T1, Value>(arg1: T1, into function: @escaping (T1) -> Value) -> () -> Value {
    {
        function(arg1)
    }
}
% for i in range(type_overload_min, type_overload_count):
% for j in range(1, i + 1):

/// Binds an argument into the function such that it takes one less argument.
///
/// - Returns: A function that takes one less argument than `function`.
///     The value is bound into the specified argument position.
@_transparent
public func bind<${t_values[i - 1]}, Value>(arg${j}: T${j}, into function: @escaping (${t_values[i - 1]}) -> Value) -> (${t_value_combos[t_values[i - 1]][j - 1]}) -> Value {
    { ${t_value_input_combos[t_values[i - 1]][j - 1]} in
        function(${t_value_forwards[i - 1]})
    }
}
% end
% end
